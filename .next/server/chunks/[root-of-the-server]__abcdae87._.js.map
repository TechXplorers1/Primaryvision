{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file:///Users/prakashkumar/Sourcecode/Primaryvision/src/app/api/apply-job/route.ts"],"sourcesContent":["// app/api/apply-job/route.ts\nimport { NextResponse } from 'next/server';\nimport nodemailer from 'nodemailer';\nimport { IncomingForm, Fields, Files } from 'formidable'; \nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { Readable } from 'stream'; // Import Node.js stream for compatibility\n\n// Zoho Mail Transport Configuration \nconst transporter = nodemailer.createTransport({\n  host: 'smtp.zoho.com',\n  port: 465,\n  secure: true,\n  auth: {\n    user: process.env.ZOHO_EMAIL_USER,\n    pass: process.env.ZOHO_EMAIL_PASS,\n  },\n  connectionTimeout: 20000, \n  socketTimeout: 30000,\n});\n\n// CRITICAL: Next.js API configuration to disable built-in body parsing\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\n// --------------------------------------------------------------------------\n// ðŸ”¥ THE ROBUST FIX: Utility function to fully adapt the Web Request for Formidable\n// --------------------------------------------------------------------------\nconst parseForm = (req: Request) => {\n    return new Promise<{ fields: Fields, files: Files }>(async (resolve, reject) => {\n        \n        if (!req.body) {\n            return reject(new Error(\"Request body is empty.\"));\n        }\n        \n        // 1. Create the Node.js Readable stream from the Web Request body\n        const nodeReadableStream = Readable.from(req.body as any);\n\n        // 2. Create the Formidable parser instance\n        const form = new IncomingForm({\n            maxFileSize: 5 * 1024 * 1024, \n            keepExtensions: true, \n        });\n\n        // 3. Attach the necessary headers and method to the stream object itself.\n        // Formidable needs these properties (like 'content-type') to start parsing.\n        const headers = Object.fromEntries(req.headers);\n        (nodeReadableStream as any).headers = headers;\n        (nodeReadableStream as any).method = req.method;\n\n        // 4. Call form.parse() with only ONE stream argument, plus the callback.\n        form.parse(nodeReadableStream as any, (err: Error | null, fields: Fields, files: Files) => {\n            if (err) {\n                console.error('Formidable Error:', err);\n                return reject(new Error('File upload failed or exceeded size limit.'));\n            }\n            resolve({ fields, files });\n        });\n    });\n};\n// --------------------------------------------------------------------------\n\nexport async function POST(request: Request) {\n  if (!process.env.ZOHO_EMAIL_USER || !process.env.RECEIVING_EMAIL) {\n    return NextResponse.json({ message: 'Server configuration error: Email credentials or recipient missing.' }, { status: 500 });\n  }\n\n  let tempFilePath: string | undefined;\n\n  try {\n    const { fields, files } = await parseForm(request);\n\n    // Formidable v3+ returns arrays for field values, so we access the first element\n    const fullName = fields.fullName?.[0];\n    const email = fields.email?.[0];\n    const phone = fields.phone?.[0];\n    const resumeFile = files.resume?.[0];\n\n    if (!resumeFile || !fullName || !email) {\n        return NextResponse.json({ message: 'Missing required form fields or resume file.' }, { status: 400 });\n    }\n\n    tempFilePath = resumeFile.filepath; \n\n    const attachment = {\n        filename: `${fullName.replace(/\\s/g, '_')}_Resume${path.extname(resumeFile.originalFilename || '.pdf')}`,\n        path: tempFilePath, \n    };\n\n    // Send the email\n    await transporter.sendMail({\n      from: process.env.ZOHO_EMAIL_USER,\n      replyTo: `${fullName} <${email}>`, \n      to: process.env.RECEIVING_EMAIL,\n      subject: `NEW JOB APPLICATION: ${fullName} (${email})`,\n      \n      text: `Applicant: ${fullName}\\nEmail: ${email}\\nPhone: ${phone}\\nResume attached.`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif;\">\n          <h2 style=\"color: #333;\">New Job Application Received</h2>\n          <p><strong>Name:</strong> ${fullName}</p>\n          <p><strong>Email:</strong> ${email}</p>\n          <p><strong>Phone:</strong> ${phone}</p>\n          <p style=\"margin-top: 15px;\">Resume is attached to this email.</p>\n        </div>\n      `,\n      attachments: [attachment],\n    });\n\n    // Clean up the temporary file\n    if (tempFilePath) {\n        await fs.unlink(tempFilePath).catch(e => console.error(\"Could not delete temp file:\", e));\n    }\n\n    return NextResponse.json({ message: 'Application successfully sent!' }, { status: 200 });\n  } catch (error) {\n    if (tempFilePath) {\n        await fs.unlink(tempFilePath).catch(e => console.error(\"Could not delete temp file on error:\", e));\n    }\n    \n    console.error('Application submission error:', error);\n    return NextResponse.json({ message: 'Failed to submit application. Check server logs.' }, { status: 500 });\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}