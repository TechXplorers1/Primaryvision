{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file:///Users/prakashkumar/Sourcecode/Primaryvision/src/app/api/send-quote/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport nodemailer from 'nodemailer';\n\n// Type definition for the expected form data\ninterface QuoteFormData {\n  firstName: string;\n  lastName: string;\n  businessName: string;\n  email: string; // This is the user's email\n  phone: string;\n  typeOfInquiry: string;\n}\n\n// Nodemailer transport configuration for Zoho Mail (Remains the same)\nconst transporter = nodemailer.createTransport({\n  host: 'smtp.zoho.com',\n  port: 465,\n  secure: true,\n  auth: {\n    // These process.env variables MUST be set on your hosting platform!\n    user: process.env.ZOHO_EMAIL_USER,    // Your verified Zoho email\n    pass: process.env.ZOHO_EMAIL_PASS,    // The App Password\n  },\n});\n\nexport async function POST(request: Request) {\n  // Check 1: Mandatory Environment Variables Check (early exit for config errors)\n  if (!process.env.ZOHO_EMAIL_USER || !process.env.ZOHO_EMAIL_PASS || !process.env.RECEIVING_EMAIL) {\n    console.error('SERVER ERROR: Email configuration missing for deployment. Check ZOHO_EMAIL_USER, ZOHO_EMAIL_PASS, and RECEIVING_EMAIL environment variables.');\n    return NextResponse.json({ \n      message: 'Server configuration error: Email service credentials missing.' \n    }, { status: 500 });\n  }\n\n  let data: QuoteFormData;\n\n  try {\n    // Check 2: Safely parse the request body\n    data = await request.json();\n  } catch (parseError) {\n    console.error('REQUEST ERROR: Failed to parse request body as JSON:', parseError);\n    return NextResponse.json({ message: 'Invalid request body format.' }, { status: 400 });\n  }\n\n  try {\n    const { firstName, lastName, businessName, email, phone, typeOfInquiry } = data;\n\n    // Check 3: Basic Data Validation (optional, but good practice)\n    if (!firstName || !email) {\n      return NextResponse.json({ message: 'Missing required fields (Name or Email).' }, { status: 400 });\n    }\n\n    const mailOptions = {\n      // 1. 'from': MUST be your verified ZOHO email (for authentication)\n      from: process.env.ZOHO_EMAIL_USER, \n      \n      // 2. 'replyTo': Set the customer's email here so you can reply directly to them\n      replyTo: `${firstName} ${lastName} <${email}>`, // e.g., \"John Doe <john.doe@example.com>\"\n      \n      // 3. 'to': The email where you receive the quote\n      to: process.env.RECEIVING_EMAIL, \n      \n      subject: `New Quote Request from ${firstName} ${lastName} (${businessName})`,\n      \n      text: `\n        --- NEW QUOTE REQUEST ---\n        \n        Name: ${firstName} ${lastName}\n        Business Name: ${businessName}\n        Email: ${email}\n        Phone: ${phone}\n        \n        Inquiry Details:\n        ${typeOfInquiry}\n        \n        -------------------------\n      `,\n      \n      html: `\n        <div style=\"font-family: Arial, sans-serif; line-height: 1.6;\">\n          <h2 style=\"color: #333;\">New Quote Request Submitted</h2>\n          <table style=\"width: 100%; border-collapse: collapse;\">\n            <tr><td style=\"padding: 5px 0; font-weight: bold;\">Name:</td><td>${firstName} ${lastName}</td></tr>\n            <tr><td style=\"padding: 5px 0; font-weight: bold;\">Business Name:</td><td>${businessName}</td></tr>\n            <tr><td style=\"padding: 5px 0; font-weight: bold;\">Email:</td><td>${email}</td></tr>\n            <tr><td style=\"padding: 5px 0; font-weight: bold;\">Phone:</td><td>${phone}</td></tr>\n          </table>\n          \n          <h3 style=\"margin-top: 20px; color: #555;\">Inquiry Details:</h3>\n          <p style=\"white-space: pre-wrap; background-color: #f9f9f9; padding: 15px; border-radius: 8px;\">${typeOfInquiry}</p>\n        </div>\n      `,\n    };\n\n    await transporter.sendMail(mailOptions);\n\n    // This section is what generates the email you see in your other screenshot!\n    return NextResponse.json({ message: 'Quote successfully sent!' }, { status: 200 });\n  } catch (error) {\n    // Catch-all for Nodemailer or general failure\n    console.error('NODEMAILER/SERVER FAILURE:', error);\n    // Return a generic error message, but the console log will show the exact reason on your host\n    return NextResponse.json({ message: 'Failed to send quote request. Please check server logs.' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAYA,sEAAsE;AACtE,MAAM,cAAc,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;IAC7C,MAAM;IACN,MAAM;IACN,QAAQ;IACR,MAAM;QACJ,oEAAoE;QACpE,MAAM,QAAQ,GAAG,CAAC,eAAe;QACjC,MAAM,QAAQ,GAAG,CAAC,eAAe;IACnC;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,gFAAgF;IAChF,IAAI,CAAC,QAAQ,GAAG,CAAC,eAAe,IAAI,CAAC,QAAQ,GAAG,CAAC,eAAe,IAAI,CAAC,QAAQ,GAAG,CAAC,eAAe,EAAE;QAChG,QAAQ,KAAK,CAAC;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;QACX,GAAG;YAAE,QAAQ;QAAI;IACnB;IAEA,IAAI;IAEJ,IAAI;QACF,yCAAyC;QACzC,OAAO,MAAM,QAAQ,IAAI;IAC3B,EAAE,OAAO,YAAY;QACnB,QAAQ,KAAK,CAAC,wDAAwD;QACtE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA+B,GAAG;YAAE,QAAQ;QAAI;IACtF;IAEA,IAAI;QACF,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,YAAY,EAAE,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE,GAAG;QAE3E,+DAA+D;QAC/D,IAAI,CAAC,aAAa,CAAC,OAAO;YACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA2C,GAAG;gBAAE,QAAQ;YAAI;QAClG;QAEA,MAAM,cAAc;YAClB,mEAAmE;YACnE,MAAM,QAAQ,GAAG,CAAC,eAAe;YAEjC,gFAAgF;YAChF,SAAS,GAAG,UAAU,CAAC,EAAE,SAAS,EAAE,EAAE,MAAM,CAAC,CAAC;YAE9C,iDAAiD;YACjD,IAAI,QAAQ,GAAG,CAAC,eAAe;YAE/B,SAAS,CAAC,uBAAuB,EAAE,UAAU,CAAC,EAAE,SAAS,EAAE,EAAE,aAAa,CAAC,CAAC;YAE5E,MAAM,CAAC;;;cAGC,EAAE,UAAU,CAAC,EAAE,SAAS;uBACf,EAAE,aAAa;eACvB,EAAE,MAAM;eACR,EAAE,MAAM;;;QAGf,EAAE,cAAc;;;MAGlB,CAAC;YAED,MAAM,CAAC;;;;6EAIgE,EAAE,UAAU,CAAC,EAAE,SAAS;sFACf,EAAE,aAAa;8EACvB,EAAE,MAAM;8EACR,EAAE,MAAM;;;;0GAIoB,EAAE,cAAc;;MAEpH,CAAC;QACH;QAEA,MAAM,YAAY,QAAQ,CAAC;QAE3B,6EAA6E;QAC7E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA2B,GAAG;YAAE,QAAQ;QAAI;IAClF,EAAE,OAAO,OAAO;QACd,8CAA8C;QAC9C,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,8FAA8F;QAC9F,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA0D,GAAG;YAAE,QAAQ;QAAI;IACjH;AACF","debugId":null}}]
}